var Crypo =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @providesModule Crypo
	 */

	'use strict';

	var Encode = __webpack_require__(6);
	var Decode = __webpack_require__(5);

	var Methods = {
	  /**
	   * Fast encryption
	   */
	  A128: '/128GhIoPQROSTeU' + 'bADfgHijKLM+n0pF' + 'WXY456xyzB7=39Va' + 'qrstJklmNuZvwcdE' + 'C',
	  MEGAN35: '3GHIJKLMNOPQRSTU' + 'b=cdefghijklmnop' + 'WXYZ/12+406789Va' + 'qrstuvwxyzABCDEF' + '5',
	  GILA7: '7ZSTJK+W=cVtBCas' + 'yf0gzA8uvwDEq3XH' + '/1RMNOILPQU4klm6' + '5YbdeFrx2hij9nop' + 'G',
	  TRIPO5: 'ghijopE+G78lmnIJ' + 'QRXY=abcS/UVWdef' + 'ABCs456tDqruvNOP' + 'wx2KLyz01M3Hk9ZF' + 'T',

	  /**
	   * Strong encryption
	   */
	  AER256: __webpack_require__(3),
	  ARMON64: __webpack_require__(4)
	};

	exports.encode = function (method, str) {
	  if (!Methods[method]) {
	    console.log(method + ' is currently not supported.');

	    return str;
	  } else if (typeof Methods[method] === 'object') {
	    return Methods[method].encode(str, arguments[2]);
	  }

	  return Encode(Methods[method], str);
	};

	exports.decode = function (method, str) {
	  if (!Methods[method]) {
	    console.log(method + ' is currently not supported.');

	    return str;
	  } else if (typeof Methods[method] === 'object') {
	    return Methods[method].decode(str, arguments[2]);
	  }

	  return Decode(Methods[method], str);
	};

	exports.getSupportedMethods = function () {
	  return Object.keys(Methods);
	};
	exports.addMethod = function (method, fn) {
	  return Methods[method] = fn;
	};

/***/ },
/* 1 */
/***/ function(module, exports) {

	/**
	 * @providesModule CompleteEscape
	 */

	'use strict';

	module.exports = function (a) {
	  var b = new Array(),
	      fromChar = new Array();

	  for (var x = 0; x < a.length; x++) {
	    b[x] = a.charAt(x);
	  }

	  fromChar['a'] = '61';
	  fromChar['b'] = '62';
	  fromChar['c'] = '63';
	  fromChar['d'] = '64';
	  fromChar['e'] = '65';
	  fromChar['f'] = '66';
	  fromChar['g'] = '67';
	  fromChar['h'] = '68';
	  fromChar['i'] = '69';
	  fromChar['j'] = '6A';
	  fromChar['k'] = '6B';
	  fromChar['l'] = '6C';
	  fromChar['m'] = '6D';
	  fromChar['n'] = '6E';
	  fromChar['o'] = '6F';
	  fromChar['p'] = '70';
	  fromChar['q'] = '71';
	  fromChar['r'] = '72';
	  fromChar['s'] = '73';
	  fromChar['t'] = '74';
	  fromChar['u'] = '75';
	  fromChar['v'] = '76';
	  fromChar['w'] = '77';
	  fromChar['x'] = '78';
	  fromChar['y'] = '79';
	  fromChar['z'] = '7A';
	  fromChar['A'] = '41';
	  fromChar['B'] = '42';
	  fromChar['C'] = '43';
	  fromChar['D'] = '44';
	  fromChar['E'] = '45';
	  fromChar['F'] = '46';
	  fromChar['G'] = '47';
	  fromChar['H'] = '48';
	  fromChar['I'] = '49';
	  fromChar['J'] = '4A';
	  fromChar['K'] = '4B';
	  fromChar['L'] = '4C';
	  fromChar['M'] = '4D';
	  fromChar['N'] = '4E';
	  fromChar['O'] = '4F';
	  fromChar['P'] = '50';
	  fromChar['Q'] = '51';
	  fromChar['R'] = '52';
	  fromChar['S'] = '53';
	  fromChar['T'] = '54';
	  fromChar['U'] = '55';
	  fromChar['V'] = '56';
	  fromChar['W'] = '57';
	  fromChar['X'] = '58';
	  fromChar['Y'] = '59';
	  fromChar['Z'] = '5A';
	  fromChar['0'] = '30';
	  fromChar['1'] = '31';
	  fromChar['2'] = '32';
	  fromChar['3'] = '33';
	  fromChar['4'] = '34';
	  fromChar['5'] = '35';
	  fromChar['6'] = '36';
	  fromChar['7'] = '37';
	  fromChar['8'] = '38';
	  fromChar['9'] = '39';
	  fromChar['*'] = '2A';
	  fromChar['/'] = '2F';
	  fromChar['_'] = '5F';
	  fromChar['+'] = '2B';
	  fromChar['-'] = '2D';
	  fromChar['@'] = '40';
	  fromChar['.'] = '2E';

	  for (var x = 0; x < b.length; x++) {
	    b[x] = b[x] == escape(b[x]) ? fromChar[b[x]] : escape(b[x]).replace(/%/, '');
	  }

	  return b.join('');
	};

/***/ },
/* 2 */
/***/ function(module, exports) {

	/**
	 * @providesModule decodeToHex
	 */

	'use strict';

	module.exports = function (oNum) {
	  var hexChars = new Array('0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'),
	      outP = '',
	      d;

	  for (var x = oNum; x > 0; x = (x - x % 16) / 16) {
	    outP = hexChars[x % 16] + '' + outP;
	  }

	  if (outP.length % 2) {
	    outP = '0' + outP;
	  }

	  return outP;
	};

/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @providesModule AER256
	 */

	'use strict';

	var completeEscape = __webpack_require__(1);
	var decodeToHex = __webpack_require__(2);

	exports.encode = function (oString, oKey) {
	  if (oKey.length < 3) {
	    console.log('The key must be at least 3 characters long');

	    return oString;
	  }

	  var oKeyNum = new Array(),
	      oOutStr = '',
	      oOp = new Array('+=', '/=', '-=', '*= 0.02 *');

	  for (var x = 0; x < oKey.length; x++) {
	    oKeyNum[x] = parseInt('0x' + completeEscape(oKey.charAt(x)));
	  }

	  for (var x = 0, y = ''; x < oString.length; x += Math.round(oKey.length / 2), y = ', ') {
	    var theNum = parseInt('0x' + completeEscape(oString.substr(x, Math.round(oKey.length / 2))));

	    if (isNaN(theNum)) {
	      console.log('Encryption Failed!');

	      return oString;
	    }

	    for (var z = 0; z < oKey.length; z++) {
	      eval('theNum ' + oOp[z % 3] + ' ' + oKeyNum[z] + ';');
	    }

	    oOutStr += y + theNum;
	  }

	  return oOutStr;
	};

	exports.decode = function (oString, oKey) {
	  if (oKey.length < 3) {
	    console.log('The key must be at least 3 characters long');

	    return oString;
	  }

	  var oKeyNum = new Array(),
	      oOutStr = oString.split(', '),
	      oOutStr2 = '',
	      oOp = new Array('-=', '*=', '+=', '/= 0.02 *');

	  for (var x = 0; x < oKey.length; x++) {
	    oKeyNum[x] = parseInt('0x' + completeEscape(oKey.charAt(x)));
	  }

	  for (var x = 0; x < oOutStr.length; x++) {
	    oOutStr[x] = parseFloat(oOutStr[x]);
	    for (var z = oKey.length - 1; z >= 0; z--) {
	      eval('oOutStr[x] ' + oOp[z % 3] + ' ' + oKeyNum[z] + ';');
	    }
	    oOutStr[x] = decodeToHex(Math.round(oOutStr[x]));
	  }

	  oOutStr = oOutStr.join('');
	  for (x = 0; x < oOutStr.length; x += 2) {
	    oOutStr2 += unescape('%' + oOutStr.substr(x, 2));
	  }

	  return oOutStr2;
	};

/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @providesModule ARMON64
	 */

	'use strict';

	var completeEscape = __webpack_require__(1);
	var decodeToHex = __webpack_require__(2);

	exports.encode = function (oString, oKey) {
	  if (oKey.length < 3) {
	    console.log('The key must be at least 3 characters long');

	    return oString;
	  }

	  var oKeyNum = new Array(),
	      oOutStr = '',
	      oOp = new Array('+=', '/=', '-=', '*= 0.01 *');

	  for (var x = 0; x < oKey.length; x++) {
	    oKeyNum[x] = parseInt('0x' + completeEscape(oKey.charAt(x)));
	  }

	  for (var x = 0, y = ''; x < oString.length; x += Math.round(oKey.length / 2), y = '+') {
	    var theNum = parseInt('0x' + completeEscape(oString.substr(x, Math.round(oKey.length / 2))));

	    if (isNaN(theNum)) {
	      console.log('Encryption failed!');

	      return oString;
	    }

	    for (var z = 0; z < oKey.length; z++) {
	      eval('theNum ' + oOp[z % 4] + ' ' + oKeyNum[z] + ';');
	    }

	    oOutStr += y + theNum;
	  }

	  return oOutStr;
	};

	exports.decode = function (oString, oKey) {
	  if (oKey.length < 3) {
	    console.log('The key must be at least 3 characters long');

	    return oString;
	  }

	  var oKeyNum = new Array(),
	      oOutStr = oString.split('+'),
	      oOutStr2 = '',
	      oOp = new Array('-=', '*=', '+=', '/= 0.01 *');

	  for (var x = 0; x < oKey.length; x++) {
	    oKeyNum[x] = parseInt('0x' + completeEscape(oKey.charAt(x)));
	  }

	  for (var x = 0; x < oOutStr.length; x++) {
	    oOutStr[x] = parseFloat(oOutStr[x]);

	    for (var z = oKey.length - 1; z >= 0; z--) {
	      eval('oOutStr[x] ' + oOp[z % 4] + ' ' + oKeyNum[z] + ';');
	    }

	    oOutStr[x] = decodeToHex(Math.round(oOutStr[x]));
	  }

	  oOutStr = oOutStr.join('');
	  for (x = 0; x < oOutStr.length; x += 2) {
	    oOutStr2 += unescape('%' + oOutStr.substr(x, 2));
	  }

	  return oOutStr2;
	};

/***/ },
/* 5 */
/***/ function(module, exports) {

	/**
	 * @providesModule Decode
	 */

	'use strict';

	module.exports = function (keyStr, input) {
	  var output = '';
	  var chr1,
	      chr2,
	      chr3 = '';
	  var enc1,
	      enc2,
	      enc3,
	      enc4 = '';
	  var i = 0;
	  var mimcod = /[^A-Za-z0-9\+\/\=]/g;

	  if (mimcod.exec(input)) {
	    alert("Errors in decoding.");
	  }

	  input = input.replace(/[^A-Za-z0-9\+\/\=]/g, '');

	  do {
	    enc1 = keyStr.indexOf(input.charAt(i++));
	    enc2 = keyStr.indexOf(input.charAt(i++));
	    enc3 = keyStr.indexOf(input.charAt(i++));
	    enc4 = keyStr.indexOf(input.charAt(i++));
	    chr1 = enc1 << 2 | enc2 >> 4;
	    chr2 = (enc2 & 15) << 4 | enc3 >> 2;
	    chr3 = (enc3 & 3) << 6 | enc4;
	    output = output + String.fromCharCode(chr1);

	    if (enc3 != 64) {
	      output = output + String.fromCharCode(chr2);
	    }

	    if (enc4 != 64) {
	      output = output + String.fromCharCode(chr3);
	    }

	    chr1 = chr2 = chr3 = '';
	    enc1 = enc2 = enc3 = enc4 = '';
	  } while (i < input.length);

	  return unescape(output);
	};

/***/ },
/* 6 */
/***/ function(module, exports) {

	/**
	 * @providesModule Encode
	 */

	'use strict';

	module.exports = function (keyStr, input) {
	  input = escape(input);

	  var output = '';
	  var chr1,
	      chr2,
	      chr3 = '';
	  var enc1,
	      enc2,
	      enc3,
	      enc4 = '';
	  var i = 0;

	  do {
	    chr1 = input.charCodeAt(i++);
	    chr2 = input.charCodeAt(i++);
	    chr3 = input.charCodeAt(i++);
	    enc1 = chr1 >> 2;
	    enc2 = (chr1 & 3) << 4 | chr2 >> 4;
	    enc3 = (chr2 & 15) << 2 | chr3 >> 6;
	    enc4 = chr3 & 63;

	    if (isNaN(chr2)) {
	      enc3 = enc4 = 64;
	    } else if (isNaN(chr3)) {
	      enc4 = 64;
	    }

	    output = output + keyStr.charAt(enc1) + keyStr.charAt(enc2) + keyStr.charAt(enc3) + keyStr.charAt(enc4);
	    chr1 = chr2 = chr3 = '';
	    enc1 = enc2 = enc3 = enc4 = '';
	  } while (i < input.length);

	  return output;
	};

/***/ }
/******/ ]);